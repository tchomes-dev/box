package structures;

import java.util.Comparator;
import java.util.Iterator;

import comparators.ReverseIntegerComparator;

public class MinQueue<V> implements PriorityQueue<Integer, V> {
  private int size = 0;
  private StudentArrayHeap<Integer, V> heap = new StudentArrayHeap<>(new ReverseIntegerComparator());
  @Override
  public PriorityQueue<Integer, V> enqueue(Integer priority, V value) {
    if (priority == null || value == null) {
      throw new NullPointerException();
    }
    
    // TODO Auto-generated method stub
    return null;
  }

  @Override
  public V dequeue() {
    // TODO Auto-generated method stub
    if (isEmpty()) {
      throw new NullPointerException();
    }
    V elem = heap.peek();
    return elem;
  }

  @Override
  public V peek() {
    // TODO Auto-generated method stub
    return null;
  }

  @Override
  public Iterator<Entry<Integer, V>> iterator() {
    // TODO Auto-generated method stub
    return null;
  }

  @Override
  public Comparator<Integer> getComparator() {
    // TODO Auto-generated method stub
    return null;
  }

  @Override
  public int size() {
    // TODO Auto-generated method stub
    return size;
  }

  @Override
  public boolean isEmpty() {
    // TODO Auto-generated method stub
    return size == 0;
  }
}
