package structures;

import java.util.NoSuchElementException;

/**************************************************************************************
 * NOTE: before starting to code, check support/structures/UnboundedQueueInterface.java
 * for detailed explanation of each interface method, including the parameters, return
 * values, assumptions, and requirements
 ***************************************************************************************/
public class Queue<T> implements UnboundedQueueInterface<T> {
	private int size = 0;
	private Node<T> head = null;
	private Node<T> tail = null; 
	public Queue() {		
            // TODO 1 
    }
	
	public Queue(Queue<T> other) {
            // TODO 2
	}
	
	@Override
	public boolean isEmpty() {
            // TODO 3
		if (head == null) {
            return true;
		}
		return false;
	}

	@Override
	public int size() {
            // TODO 4
            return size;
	}

	@Override
	public void enqueue(T element) {
            // TODO 5
		Node<T> newNode = new Node<>(element, null);
		if (isEmpty()) {
			head = newNode;
			tail = newNode;
			size++;
		} else {
			tail.next = newNode;
			tail = newNode;
			size++;
		}
	}

	@Override
	public T dequeue() throws NoSuchElementException {
            // TODO 6
		if (isEmpty()) {
			throw new NoSuchElementException();
		}
		Node<T> temp = head;
		head = head.next;
        return temp.data;
	}

	@Override
	public T peek() throws NoSuchElementException {
            // TODO 7
            return head.data;
	}

	
	@Override
	public UnboundedQueueInterface<T> reversed() {
            // TODO 8
            return null;
	}
}

class Node<T> {
	public T data;
	public Node<T> next;
	public Node(T data) { this.data=data;}
	public Node(T data, Node<T> next) {
		this.data = data; this.next=next;
	}
}

